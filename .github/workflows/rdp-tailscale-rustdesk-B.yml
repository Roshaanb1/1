name: RDP + Tailscale Handoff (B)

on:
  workflow_dispatch:
    inputs:
      ts_authkey:
        description: "Tailscale Auth key (reusable or ephemeral) - REQUIRED"
        required: true
      runtime_minutes:
        description: "Runtime in minutes (max 360; default 355)"
        required: false
        default: "355"
      cycles:
        description: "0=stop after this run; N=handoffs left incl this run (0-20)"
        required: false
        default: "0"
      rdp_count:
        description: "How many RDP instances (1-10)"
        required: false
        default: "1"

permissions:
  contents: read
  actions: write # Needed to dispatch the next workflow

defaults:
  run:
    shell: pwsh

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - id: mk
        run: |
          # Use rdp_count (1..10)
          $n = [int]"${{ inputs.rdp_count }}"; if ($n -lt 1) { $n = 1 }; if ($n -gt 10) { $n = 10 }
          
          $inc = @(); for ($i=1; $i -le $n; $i++){ $inc += @{ id = $i } }
          $json = @{ include = $inc } | ConvertTo-Json -Compress
          "matrix=$json" | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8

  rdp:
    needs: setup
    runs-on: windows-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      max-parallel: 10
    timeout-minutes: 370
    env:
      RDP_USER: ghuser
      RDP_PASS: GH@runner!123

    steps:
      - name: Decide hostname + runtime
        run: |
          if ("${{ inputs.rdp_count }}" -gt 1) { $hn = "ghbullet${{ matrix.id }}" } else { $hn = "ghbullet" }
          "TS_HOSTNAME=$hn" | Out-File -Append $env:GITHUB_ENV

          function IntOr($v,$d){ if("$v" -match '^\d+$'){ [int]$v } else { [int]$d } }
          $runtime = IntOr("${{ inputs.runtime_minutes }}",355)
          if ($runtime -gt 360) { $runtime = 360 }
          if ($runtime -lt 5) { $runtime = 5 }
          "RUNTIME_MINUTES=$runtime" | Out-File -Append $env:GITHUB_ENV
          Write-Host "Hostname: $hn | Runtime: $runtime min"
      
      # ⚠️ Security: Use a robust and maintained method for Tailscale installation
      - name: Install + Up Tailscale (using official Action or modern MSI/winget)
        uses: tailscale/github-action@v2
        with:
          version: 1.x
          authkey: ${{ inputs.ts_authkey }}
          hostname: ${{ env.TS_HOSTNAME }}
          accept-dns: true
          accept-routes: true
      
      - name: Get Tailscale IP
        run: |
          $ts = "$env:ProgramFiles\Tailscale\tailscale.exe"
          & $ts up --authkey "${{ inputs.ts_authkey }}" --hostname "$env:TS_HOSTNAME" --accept-dns=true --accept-routes=true -timeout 60s
          
          $ip4 = & $ts ip -4 | Select-Object -First 1
          if (-not $ip4) { Write-Error "Failed to get Tailscale IP after login. Check authkey." }
          "TAILSCALE_IP=$ip4" | Out-File -Append $env:GITHUB_ENV
          Write-Host "--- Tailscale IPv4: $ip4 ---"
      
      - name: Enable RDP user + firewall
        run: |
          $u=$env:RDP_USER; $p=$env:RDP_PASS
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -EA SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires | Out-Null
            Add-LocalGroupMember -Group "Administrators" -Member $u | Out-Null
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u | Out-Null
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires | Out-Null
            Enable-LocalUser -Name $u | Out-Null
            Add-LocalGroupMember -Group "Administrators" -Member $u -EA SilentlyContinue | Out-Null
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u -EA SilentlyContinue | Out-Null
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null
          Write-Host "RDP ready."

      - name: 🔔 RDP Connection Details 🔑
        run: |
          Write-Host "::group::Connection Details"
          Write-Host ""
          Write-Host "🔥 RDP Hostname: $env:TS_HOSTNAME"
          Write-Host "🔥 RDP IP (Tailscale): $env:TAILSCALE_IP"
          Write-Host "👤 RDP User: $env:RDP_USER"
          Write-Host "🔒 RDP Password: $env:RDP_PASS"
          Write-Host ""
          Write-Host "::endgroup::"
          
          echo "ts_ip=$env:TAILSCALE_IP" >> $GITHUB_ENV
          echo "rdp_user=$env:RDP_USER" >> $GITHUB_ENV
          echo "rdp_pass=$env:RDP_PASS" >> $GITHUB_ENV


      - name: Keep alive (to ${{ env.RUNTIME_MINUTES }} mins)
        run: |
          $mins = [int]"${{ env.RUNTIME_MINUTES }}"
          $end = (Get-Date).AddMinutes($mins)
          Write-Host "Starting keep-alive until: $($end.ToString("HH:mm:ss"))"
          while ((Get-Date) -lt $end) {
            Write-Host ("Heartbeat " + (Get-Date).ToString("HH:mm:ss") + " | Host: $env:TS_HOSTNAME | IP: $env:TAILSCALE_IP")
            Start-Sleep -Seconds 60
          }

      - name: Dispatch next or stop
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          $cycles = [int]"${{ inputs.cycles }}"
          if ($cycles -gt 0) {
            $next = $cycles - 1
            # 💡 The only difference: B always calls A
            $target_workflow = "rdp-tailscale-A.yml"

            $payload = @{
              ts_authkey      = "${{ inputs.ts_authkey }}"
              runtime_minutes = "${{ inputs.runtime_minutes }}"
              cycles          = "$next"
              rdp_count       = "${{ inputs.rdp_count }}"
            }
            $url = "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$target_workflow/dispatches"
            $hdr = @{ Authorization = "Bearer $env:GH_TOKEN"; Accept = "application/vnd.github+json" }
            $body = @{ ref="${{ github.ref_name }}"; inputs=$payload } | ConvertTo-Json -Depth 20
            
            Write-Host "Dispatching $target_workflow with cycles=$next"
            Invoke-WebRequest -Method POST -Uri $url -Headers $hdr -Body $body | Out-Null
            Write-Host "Successfully dispatched $target_workflow."
          } else { 
            Write-Host "No cycles configured. Done."
          }
